package com.umss.fcyt.tss.classes

import android.graphics.Color
import android.view.View
import android.widget.TextView
import com.echo.holographlibrary.Bar
import com.echo.holographlibrary.BarGraph
import com.jjoe64.graphview.GraphView
import com.jjoe64.graphview.series.DataPoint
import com.jjoe64.graphview.series.PointsGraphSeries
import lecho.lib.hellocharts.model.Axis
import lecho.lib.hellocharts.model.Line
import lecho.lib.hellocharts.model.LineChartData
import lecho.lib.hellocharts.model.PointValue
import lecho.lib.hellocharts.view.LineChartView

class AddGraphics {

    fun dotPlot(
        average: Double,
        average1: Double,
        graphRandomNumbers: BarGraph,
        s1: String,
        s2: String
    ) {
        val bars = ArrayList<Bar>()

        val barOne = Bar()
        barOne.color = Color.BLUE
        barOne.name = s1
        barOne.value = average.toFloat()
        bars.add(barOne)

        val barTwo = Bar()
        barTwo.color = Color.GREEN
        barTwo.name = s2
        barTwo.value = average1.toFloat()
        bars.add(barTwo)

        graphRandomNumbers.bars = bars
    }

    fun graphicPoints(
        pointsOne: List<PointValue>,
        pointsTwo: List<PointValue>,
        graphVariables: LineChartView,
        labelOne: TextView,
        labelTwo: TextView,
    ) {
        val lineOne = Line(pointsOne).setColor(Color.BLUE)
        val lineTwo = Line(pointsTwo).setColor(Color.GREEN)

        val lines = mutableListOf<Line>()
        lines.add(lineOne)
        lines.add(lineTwo)

        val data = LineChartData()
        data.lines = lines

        val axisY = Axis()
        data.axisYLeft = axisY

        val axisX = Axis()
        axisX.isAutoGenerated = false
        data.axisXBottom = axisX

        graphVariables.lineChartData = data

        val label1: TextView = labelOne
        val label2: TextView = labelTwo
        label1.visibility = View.VISIBLE
        label2.visibility = View.VISIBLE
    }

    fun graphicScatter(politicalHoursOne: List<Int>, graphView: GraphView) {
        graphView.removeAllSeries()
        val seriesBelow500 = PointsGraphSeries<DataPoint>()
        val seriesBetween500And700 = PointsGraphSeries<DataPoint>()

        politicalHoursOne.forEachIndexed { index, value ->
            val dataPoint = DataPoint(index.toDouble(), value.toDouble())

            if (value < 500 || value > 700) {
                seriesBelow500.appendData(dataPoint, true, politicalHoursOne.size)
            } else {
                seriesBetween500And700.appendData(dataPoint, true, politicalHoursOne.size)
            }
        }

        seriesBelow500.color = Color.RED

        seriesBelow500.size = 10f
        seriesBetween500And700.size = 10f

        graphView.addSeries(seriesBelow500)
        graphView.addSeries(seriesBetween500And700)
        graphView.viewport.isXAxisBoundsManual = true
        graphView.viewport.setMinX(0.0)
        graphView.viewport.setMaxX(politicalHoursOne.size.toDouble())
        graphView.gridLabelRenderer.isHorizontalLabelsVisible = false
    }
}